// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for TransactionStatus.
const (
	APPROVED        TransactionStatus = "APPROVED"
	COMPLETED       TransactionStatus = "COMPLETED"
	FAILED          TransactionStatus = "FAILED"
	PENDINGAPPROVAL TransactionStatus = "PENDING_APPROVAL"
	REJECTED        TransactionStatus = "REJECTED"
	RESERVED        TransactionStatus = "RESERVED"
)

// NewTransaction defines model for NewTransaction.
type NewTransaction struct {
	// Amount The amount to transfer.
	Amount     float64 `json:"amount"`
	Currency   string  `json:"currency"`
	FromUserId string  `json:"from_user_id"`

	// ScheduledAt The time at which the transaction should be executed.
	ScheduledAt time.Time `json:"scheduled_at"`
	ToUserId    string    `json:"to_user_id"`
}

// Transaction defines model for Transaction.
type Transaction struct {
	Amount      float64            `json:"amount"`
	CreatedAt   time.Time          `json:"created_at"`
	Currency    string             `json:"currency"`
	FromUserId  string             `json:"from_user_id"`
	Id          openapi_types.UUID `json:"id"`
	ScheduledAt time.Time          `json:"scheduled_at"`
	Status      TransactionStatus  `json:"status"`
	ToUserId    string             `json:"to_user_id"`
	UpdatedAt   time.Time          `json:"updated_at"`
}

// TransactionStatus defines model for Transaction.Status.
type TransactionStatus string

// Wallet defines model for Wallet.
type Wallet struct {
	Balance  float64 `json:"balance"`
	Currency string  `json:"currency"`
	Reserved float64 `json:"reserved"`
	UserId   string  `json:"user_id"`

	// Version A version number for optimistic locking.
	Version int64 `json:"version"`
}

// ScheduleTransactionJSONRequestBody defines body for ScheduleTransaction for application/json ContentType.
type ScheduleTransactionJSONRequestBody = NewTransaction

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Schedule a new transaction
	// (POST /transactions)
	ScheduleTransaction(w http.ResponseWriter, r *http.Request)
	// Get transaction details
	// (GET /transactions/{transactionId})
	GetTransactionById(w http.ResponseWriter, r *http.Request, transactionId openapi_types.UUID)
	// Get wallet details for a user
	// (GET /wallets/{userId})
	GetWalletByUserId(w http.ResponseWriter, r *http.Request, userId string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Schedule a new transaction
// (POST /transactions)
func (_ Unimplemented) ScheduleTransaction(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get transaction details
// (GET /transactions/{transactionId})
func (_ Unimplemented) GetTransactionById(w http.ResponseWriter, r *http.Request, transactionId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get wallet details for a user
// (GET /wallets/{userId})
func (_ Unimplemented) GetWalletByUserId(w http.ResponseWriter, r *http.Request, userId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ScheduleTransaction operation middleware
func (siw *ServerInterfaceWrapper) ScheduleTransaction(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ScheduleTransaction(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTransactionById operation middleware
func (siw *ServerInterfaceWrapper) GetTransactionById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "transactionId" -------------
	var transactionId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "transactionId", chi.URLParam(r, "transactionId"), &transactionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "transactionId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTransactionById(w, r, transactionId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetWalletByUserId operation middleware
func (siw *ServerInterfaceWrapper) GetWalletByUserId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetWalletByUserId(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/transactions", wrapper.ScheduleTransaction)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/transactions/{transactionId}", wrapper.GetTransactionById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/wallets/{userId}", wrapper.GetWalletByUserId)
	})

	return r
}
