// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// Defines values for TransactionStatus.
const (
	APPROVED        TransactionStatus = "APPROVED"
	COMPLETED       TransactionStatus = "COMPLETED"
	FAILED          TransactionStatus = "FAILED"
	PENDINGAPPROVAL TransactionStatus = "PENDING_APPROVAL"
	REJECTED        TransactionStatus = "REJECTED"
	RESERVED        TransactionStatus = "RESERVED"
)

// LedgerEntry defines model for LedgerEntry.
type LedgerEntry struct {
	AccountId     *string    `json:"account_id,omitempty"`
	Credit        *int64     `json:"credit,omitempty"`
	Debit         *int64     `json:"debit,omitempty"`
	Description   *string    `json:"description,omitempty"`
	EntryId       *string    `json:"entry_id,omitempty"`
	Timestamp     *time.Time `json:"timestamp,omitempty"`
	TransactionId *string    `json:"transaction_id,omitempty"`
}

// NewTransaction defines model for NewTransaction.
type NewTransaction struct {
	// Amount The amount of the transaction in the smallest currency unit (e.g., cents).
	Amount int64 `json:"amount"`

	// DelaySeconds An optional delay in seconds before the transaction is processed. Maximum 900 seconds (15 minutes).
	DelaySeconds *int32 `json:"delay_seconds,omitempty"`
	FromUserId   string `json:"from_user_id"`
	ToUserId     string `json:"to_user_id"`
}

// NewWallet defines model for NewWallet.
type NewWallet struct {
	Name   string `json:"name"`
	UserId string `json:"user_id"`
}

// Transaction defines model for Transaction.
type Transaction struct {
	Amount     *int64             `json:"amount,omitempty"`
	CreatedAt  *time.Time         `json:"created_at,omitempty"`
	FromUserId *string            `json:"from_user_id,omitempty"`
	Id         *string            `json:"id,omitempty"`
	Status     *TransactionStatus `json:"status,omitempty"`
	ToUserId   *string            `json:"to_user_id,omitempty"`

	// Ttl A Unix timestamp representing the expiration time of the transaction record.
	Ttl       *int64     `json:"ttl,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// TransactionStatus defines model for Transaction.Status.
type TransactionStatus string

// Wallet defines model for Wallet.
type Wallet struct {
	// Balance The wallet balance in the smallest currency unit (e.g., cents).
	Balance   *int64     `json:"balance,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Name      *string    `json:"name,omitempty"`

	// Reserved Funds reserved for pending transactions.
	Reserved *int64  `json:"reserved,omitempty"`
	UserId   *string `json:"user_id,omitempty"`
	Version  *int64  `json:"version,omitempty"`
}

// ListLedgerEntriesParams defines parameters for ListLedgerEntries.
type ListLedgerEntriesParams struct {
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// ScheduleTransactionJSONRequestBody defines body for ScheduleTransaction for application/json ContentType.
type ScheduleTransactionJSONRequestBody = NewTransaction

// CreateWalletJSONRequestBody defines body for CreateWallet for application/json ContentType.
type CreateWalletJSONRequestBody = NewWallet

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List recent ledger entries
	// (GET /ledger)
	ListLedgerEntries(w http.ResponseWriter, r *http.Request, params ListLedgerEntriesParams)
	// Schedule a new transaction
	// (POST /transactions)
	ScheduleTransaction(w http.ResponseWriter, r *http.Request)
	// Cancel a transaction by its ID
	// (DELETE /transactions/{transactionId})
	CancelTransactionById(w http.ResponseWriter, r *http.Request, transactionId string)
	// Get a transaction by its ID
	// (GET /transactions/{transactionId})
	GetTransactionById(w http.ResponseWriter, r *http.Request, transactionId string)
	// List all transactions for a user
	// (GET /users/{userId}/transactions)
	ListTransactionsByUserId(w http.ResponseWriter, r *http.Request, userId string)
	// List all wallets
	// (GET /wallets)
	ListWallets(w http.ResponseWriter, r *http.Request)
	// Create a new wallet
	// (POST /wallets)
	CreateWallet(w http.ResponseWriter, r *http.Request)
	// Delete a wallet by user ID
	// (DELETE /wallets/{userId})
	DeleteWallet(w http.ResponseWriter, r *http.Request, userId string)
	// Get a wallet by user ID
	// (GET /wallets/{userId})
	GetWalletByUserId(w http.ResponseWriter, r *http.Request, userId string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List recent ledger entries
// (GET /ledger)
func (_ Unimplemented) ListLedgerEntries(w http.ResponseWriter, r *http.Request, params ListLedgerEntriesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Schedule a new transaction
// (POST /transactions)
func (_ Unimplemented) ScheduleTransaction(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Cancel a transaction by its ID
// (DELETE /transactions/{transactionId})
func (_ Unimplemented) CancelTransactionById(w http.ResponseWriter, r *http.Request, transactionId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a transaction by its ID
// (GET /transactions/{transactionId})
func (_ Unimplemented) GetTransactionById(w http.ResponseWriter, r *http.Request, transactionId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all transactions for a user
// (GET /users/{userId}/transactions)
func (_ Unimplemented) ListTransactionsByUserId(w http.ResponseWriter, r *http.Request, userId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all wallets
// (GET /wallets)
func (_ Unimplemented) ListWallets(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new wallet
// (POST /wallets)
func (_ Unimplemented) CreateWallet(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a wallet by user ID
// (DELETE /wallets/{userId})
func (_ Unimplemented) DeleteWallet(w http.ResponseWriter, r *http.Request, userId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a wallet by user ID
// (GET /wallets/{userId})
func (_ Unimplemented) GetWalletByUserId(w http.ResponseWriter, r *http.Request, userId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListLedgerEntries operation middleware
func (siw *ServerInterfaceWrapper) ListLedgerEntries(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListLedgerEntriesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListLedgerEntries(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ScheduleTransaction operation middleware
func (siw *ServerInterfaceWrapper) ScheduleTransaction(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ScheduleTransaction(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CancelTransactionById operation middleware
func (siw *ServerInterfaceWrapper) CancelTransactionById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "transactionId" -------------
	var transactionId string

	err = runtime.BindStyledParameterWithOptions("simple", "transactionId", chi.URLParam(r, "transactionId"), &transactionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "transactionId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CancelTransactionById(w, r, transactionId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTransactionById operation middleware
func (siw *ServerInterfaceWrapper) GetTransactionById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "transactionId" -------------
	var transactionId string

	err = runtime.BindStyledParameterWithOptions("simple", "transactionId", chi.URLParam(r, "transactionId"), &transactionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "transactionId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTransactionById(w, r, transactionId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListTransactionsByUserId operation middleware
func (siw *ServerInterfaceWrapper) ListTransactionsByUserId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTransactionsByUserId(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListWallets operation middleware
func (siw *ServerInterfaceWrapper) ListWallets(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListWallets(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateWallet operation middleware
func (siw *ServerInterfaceWrapper) CreateWallet(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateWallet(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteWallet operation middleware
func (siw *ServerInterfaceWrapper) DeleteWallet(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteWallet(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetWalletByUserId operation middleware
func (siw *ServerInterfaceWrapper) GetWalletByUserId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetWalletByUserId(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ledger", wrapper.ListLedgerEntries)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/transactions", wrapper.ScheduleTransaction)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/transactions/{transactionId}", wrapper.CancelTransactionById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/transactions/{transactionId}", wrapper.GetTransactionById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/{userId}/transactions", wrapper.ListTransactionsByUserId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/wallets", wrapper.ListWallets)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/wallets", wrapper.CreateWallet)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/wallets/{userId}", wrapper.DeleteWallet)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/wallets/{userId}", wrapper.GetWalletByUserId)
	})

	return r
}
