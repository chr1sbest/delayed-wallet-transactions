// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/chris/delayed-wallet-transactions/pkg/models"
	mock "github.com/stretchr/testify/mock"

	time "time"

	uuid "github.com/google/uuid"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// CreateTransaction provides a mock function with given fields: ctx, newTx
func (_m *Storage) CreateTransaction(ctx context.Context, newTx *models.Transaction) (*models.Transaction, error) {
	ret := _m.Called(ctx, newTx)

	if len(ret) == 0 {
		panic("no return value specified for CreateTransaction")
	}

	var r0 *models.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Transaction) (*models.Transaction, error)); ok {
		return rf(ctx, newTx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Transaction) *models.Transaction); ok {
		r0 = rf(ctx, newTx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Transaction) error); ok {
		r1 = rf(ctx, newTx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWallet provides a mock function with given fields: ctx, wallet
func (_m *Storage) CreateWallet(ctx context.Context, wallet *models.Wallet) (*models.Wallet, error) {
	ret := _m.Called(ctx, wallet)

	if len(ret) == 0 {
		panic("no return value specified for CreateWallet")
	}

	var r0 *models.Wallet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Wallet) (*models.Wallet, error)); ok {
		return rf(ctx, wallet)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Wallet) *models.Wallet); ok {
		r0 = rf(ctx, wallet)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Wallet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Wallet) error); ok {
		r1 = rf(ctx, wallet)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWallet provides a mock function with given fields: ctx, userID
func (_m *Storage) DeleteWallet(ctx context.Context, userID string) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWallet")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetStuckTransactions provides a mock function with given fields: ctx, maxAge
func (_m *Storage) GetStuckTransactions(ctx context.Context, maxAge time.Duration) ([]models.Transaction, error) {
	ret := _m.Called(ctx, maxAge)

	if len(ret) == 0 {
		panic("no return value specified for GetStuckTransactions")
	}

	var r0 []models.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration) ([]models.Transaction, error)); ok {
		return rf(ctx, maxAge)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration) []models.Transaction); ok {
		r0 = rf(ctx, maxAge)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Duration) error); ok {
		r1 = rf(ctx, maxAge)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransaction provides a mock function with given fields: ctx, txID
func (_m *Storage) GetTransaction(ctx context.Context, txID uuid.UUID) (*models.Transaction, error) {
	ret := _m.Called(ctx, txID)

	if len(ret) == 0 {
		panic("no return value specified for GetTransaction")
	}

	var r0 *models.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.Transaction, error)); ok {
		return rf(ctx, txID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.Transaction); ok {
		r0 = rf(ctx, txID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, txID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWallet provides a mock function with given fields: ctx, userID
func (_m *Storage) GetWallet(ctx context.Context, userID string) (*models.Wallet, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetWallet")
	}

	var r0 *models.Wallet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Wallet, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Wallet); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Wallet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SettleTransaction provides a mock function with given fields: ctx, tx
func (_m *Storage) SettleTransaction(ctx context.Context, tx *models.Transaction) error {
	ret := _m.Called(ctx, tx)

	if len(ret) == 0 {
		panic("no return value specified for SettleTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Transaction) error); ok {
		r0 = rf(ctx, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
